#!/usr/bin/python
import readspec
import argparse
import parser
from util import *
from model import *
from ectlconv import *
import logging

# Parse command line arguments
# ddctl.py -s <specfile.json> [--include-init] [--ectl-only] [--output <outputfile.png>]

argparser = argparse.ArgumentParser(description='Parse a CTL formula')
argparser.add_argument('-s', '--specfile', help='specfile.json', required=True)
argparser.add_argument('-i', '--include-init', help='include initial states', action='store_true')
argparser.add_argument('-e', '--ectl-only', help='only convert to ECTL', action='store_true')
argparser.add_argument('-o', '--output', help='output file name')
args = argparser.parse_args()

ks, ctlf = readspec.read_spec(args.specfile)

# store include_init flag
include_init = args.include_init

# if output file name is specified, store it
output = args.output

isectl, ectlf = ECTLConverter().ectl(parser.parse(ctlf))

if not isectl and args.ectl_only:
    logging.error("CTL formula + '%s' is not ECTL" % ectlf.body)
    exit(1)

print(ectlf.body)

ksbdd = ksBDD(ks)

m = Model(ks, ectlf, include_init, output)

result = m.check()
print(reduce(mergecur, ksbdd.infer(result))) # test inference

# if m.check() == False:
#     print("Counterexample: ", m.counterexample)
# else:
#     print("The CTL formula is valid")

