#!/usr/bin/python

import readspec
import ctlparser
import ast
import sys
import argparse
from nodes import *

# TODO(raghu): use logging module and log levels and colors

def validate_kripke_structure(kripke_structure):
    """Validate the Kripke structure.
    """
    states = kripke_structure['states']
    initial_states = kripke_structure['initial_states']
    transitions = kripke_structure['transitions']
    atomic_propositions = kripke_structure['atomic_propositions']
    # Check if the initial states are in the states
    for state in initial_states:
        if state not in states:
            print('Initial state \'%s\' not in states' % state)
            return False
    # Check if the transitions are in the states
    for state in transitions:
        if state not in states:
            print('Transition state \'%s\' not in states' % state)
            return False
        for successor in transitions[state]:
            if successor not in states:
                print('Transition successor \'%s\' not in states' % successor)
                return False
    # Check if the atomic_propositions are in the states
    for atomic_proposition in atomic_propositions:
        if atomic_proposition not in states:
            print('atomic_proposition \'%s\' not in states' % atomic_proposition)
            return False
        
    return True

def validate_formula(ct, kripke_structure):
    """Validate the CTL formula
    against the Kripke structure.
    """
    atomic_propositions = kripke_structure['atomic_propositions']
    atomic_propositions = set([item for sublist in atomic_propositions.values() for item in sublist])
    # Get the CTL formula
    ctl_formula = ct
    for node in ast.walk(ctl_formula):
        if isinstance(node, AtomicProposition):
            if node.arg not in atomic_propositions:
                print('atomic_proposition \'%s\' not in atomic_propositions' % node.arg)
                return False
    return True
    

# Parse command line arguments
# ddctl.py -s <specfile.json> -m <cli | gui>
argparser = argparse.ArgumentParser(description='Parse a CTL formula')
argparser.add_argument('-s', '--specfile', help='specfile.json', required=True)
args = argparser.parse_args()

kripke_structure, ctl_formula = readspec.read_spec(args.specfile)

parser = ctlparser.Parser('ctl')
ct = parser.parse(ctl_formula)

if not validate_kripke_structure(kripke_structure):
    print('Invalid Kripke structure')
    sys.exit(1)

if not validate_formula(ct, kripke_structure):
    print('Invalid CTL formula')
    sys.exit(1)

print(ast.dump(ct))

import ksBDD

init, T, ap = ksBDD.KripkeStructureBDD(kripke_structure)
print('init: %s' % init)
print('T: %s' % T)
print('ap: %s' % ap)






            


